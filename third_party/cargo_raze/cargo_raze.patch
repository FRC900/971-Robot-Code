--- tools/BUILD.bazel	2022-02-03 01:20:57.060271436 -0800
+++ tools/BUILD.bazel	2022-02-03 01:21:14.321056806 -0800
@@ -43,24 +43,12 @@ sh_binary(
 
 alias(
     name = "cargo",
-    actual = select({
-        "@rules_rust//rust/platform:aarch64-apple-darwin": "@rust_darwin_aarch64//:cargo",
-        "@rules_rust//rust/platform:aarch64-unknown-linux-gnu": "@rust_linux_aarch64//:cargo",
-        "@rules_rust//rust/platform:x86_64-apple-darwin": "@rust_darwin_x86_64//:cargo",
-        "@rules_rust//rust/platform:x86_64-pc-windows-msvc": "@rust_windows_x86_64//:cargo",
-        "@rules_rust//rust/platform:x86_64-unknown-linux-gnu": "@rust_linux_x86_64//:cargo",
-    }),
+    actual = "@rust//:cargo",
 )
 
 alias(
     name = "rustc",
-    actual = select({
-        "@rules_rust//rust/platform:aarch64-apple-darwin": "@rust_darwin_aarch64//:rustc",
-        "@rules_rust//rust/platform:aarch64-unknown-linux-gnu": "@rust_linux_aarch64//:rustc",
-        "@rules_rust//rust/platform:x86_64-apple-darwin": "@rust_darwin_x86_64//:rustc",
-        "@rules_rust//rust/platform:x86_64-pc-windows-msvc": "@rust_windows_x86_64//:rustc",
-        "@rules_rust//rust/platform:x86_64-unknown-linux-gnu": "@rust_linux_x86_64//:rustc",
-    }),
+    actual = "@rust//:rustc",
 )
 
 sh_binary(

--- third_party/zlib/BUILD.zlib.bazel	2022-02-03 01:26:46.756187851 -0800
+++ third_party/zlib/BUILD.zlib.bazel	2022-02-03 01:26:58.048702010 -0800
@@ -58,6 +58,8 @@ cc_library(
         "//conditions:default": [
             "-Wno-unused-variable",
             "-Wno-implicit-function-declaration",
+            "-Wno-cast-qual",
+            "-Wno-format-nonliteral",
         ],
     }),
     includes = ["zlib/include/"],
@@ -28,6 +28,15 @@ genrule(
     srcs = _ZLIB_HEADERS,
     outs = _ZLIB_PREFIXED_HEADERS,
     cmd = "cp $(SRCS) $(@D)/zlib/include/",
+    visibility = ["//visibility:public"],
 )
+
+genrule(
+    name = "dep_z_include",
+    visibility = ["//visibility:public"],
+    outs = ["dep_z_include.env"],
+    srcs = [":copy_public_headers"],
+    cmd = "echo 'DEP_Z_INCLUDE=$${pwd}/'\"$$(dirname \"$$(echo \"$(locations :copy_public_headers)\" | awk '{ print $$1 }')\")\" > $@",
+)
 
 cc_library(

--- third_party/pcre/BUILD.pcre.bazel	2022-02-03 01:29:12.830839568 -0800
+++ third_party/pcre/BUILD.pcre.bazel	2022-02-03 01:29:25.187402321 -0800
@@ -10,7 +10,14 @@ filegroup(
 cmake(
     name = "pcre",
     cache_entries = {
-        "CMAKE_C_FLAGS": "-fPIC",
+        "CMAKE_C_FLAGS": "-fPIC -DHAVE_STRERROR=1 -Wno-unused -Wno-unused-parameter -Wunused-command-line-argument -Wno-cast-qual -Wno-self-assign -Wno-cast-align -Wno-incompatible-pointer-types-discards-qualifiers",
+        "CMAKE_CXX_FLAGS": "-fPIC -DHAVE_STRERROR=1 -Wno-unused -Wno-unused-parameter -Wno-unused-command-line-argument",
+        "CMAKE_EXE_LINKER_FLAGS": "-Wno-unused-command-line-argument",
+        "PCRE_SUPPORT_LIBREADLINE": "off",
+        "PCRE_BUILD_TESTS": "off",
     },
+    deps = [
+        "@cargo_raze__zlib//:zlib",
+    ],
     lib_source = ":all",
     out_static_libs = ["libpcre.a"],

--- third_party/openssl/BUILD.openssl.bazel	2022-02-03 23:31:09.601309219 -0800
+++ third_party/openssl/BUILD.openssl.bazel	2022-02-03 23:33:16.123104901 -0800
@@ -41,6 +41,14 @@ configure_make(
         "libssl.a",
         "libcrypto.a",
     ],
+    copts = [
+        "-Wno-unused-parameter",
+        "-Wno-format-nonliteral",
+        "-Wno-incompatible-pointer-types-discards-qualifiers",
+        "-Wno-missing-field-initializers",
+        "-Wno-cast-qual",
+        "-Wno-cast-align",
+    ],
     targets = [
         "build_libs",
         "install_dev",

--- third_party/libssh2/BUILD.libssh2.bazel	2022-02-04 00:03:43.831120614 -0800
+++ third_party/libssh2/BUILD.libssh2.bazel	2022-02-04 00:04:19.100745883 -0800
@@ -29,6 +29,14 @@ cmake(
         "@rules_rust//rust/platform:windows": ["ssh2.lib"],
         "//conditions:default": ["libssh2.a"],
     }),
+    copts = [
+        "-Wno-cast-qual",
+        "-Wno-sizeof-array-div",
+        "-Wno-unused-parameter",
+        "-DHAVE_SNPRINTF=1",
+        "-DHAVE_SYS_UIO_H=1",
+        "-DHAVE_SYS_SOCKET_H=1",
+    ],
     visibility = ["//visibility:public"],
     deps = ["@cargo_raze__openssl//:openssl"],
 )

--- third_party/libgit2/BUILD.libgit2.bazel	2022-02-04 00:13:21.681725240 -0800
+++ third_party/libgit2/BUILD.libgit2.bazel	2022-02-04 00:13:58.599423312 -0800
@@ -39,6 +39,13 @@ cmake(
         "@rules_rust//rust/platform:windows": ["git2.lib"],
         "//conditions:default": ["libgit2.a"],
     }),
+    copts = [
+        "-Wno-unused-command-line-argument",
+        "-Wno-cast-qual",
+        "-Wno-cast-align",
+        "-Wno-incompatible-pointer-types-discards-qualifiers",
+        "-Wno-format-nonliteral",
+    ],
     visibility = ["//visibility:public"],
     deps = [
         "@cargo_raze__libssh2//:libssh2",

--- impl/Cargo.toml	2022-02-04 00:44:15.679153957 -0800
+++ impl/Cargo.toml	2022-02-04 00:44:17.799251382 -0800
@@ -113,6 +113,7 @@ additional_deps = ["@cargo_raze__libssh2
 # build.rs file: https://github.com/rust-lang/libz-sys/blob/main/build.rs
 gen_buildrs = false
 additional_flags = ["--cfg=static"]
+additional_deps = ["@cargo_raze__zlib//:zlib"]
 
 [package.metadata.raze.crates.openssl.'*']
 additional_deps = ["@cargo_raze__openssl//:openssl"]
@@ -106,6 +106,8 @@ additional_deps = ["@cargo_raze__libgit2
 build_data_dependencies = [
     "@cargo_raze__libssh2//:libssh2",
     "@cargo_raze__openssl//:openssl",
+    "@cargo_raze__zlib//:copy_public_headers",
 ]
 additional_deps = ["@cargo_raze__libssh2//:libssh2"]
+# TODO(Brian): Set buildrs_additional_environment_variables for upstreaming.
 

--- third_party/cargo/remote/BUILD.libz-sys-1.1.2.bazel	2022-02-04 00:45:43.779201978 -0800
+++ third_party/cargo/remote/BUILD.libz-sys-1.1.2.bazel	2022-02-04 00:45:57.151816346 -0800
@@ -57,6 +57,8 @@ rust_library(
     # buildifier: leave-alone
+    dep_env_files = ["@cargo_raze__zlib//:dep_z_include"],
     deps = [
         "@cargo_raze__libc__0_2_92//:libc",
+        "@cargo_raze__zlib//:zlib",
     ] + selects.with_or({
         # cfg(target_env = "msvc")
         (

--- third_party/cargo/remote/BUILD.libssh2-sys-0.2.21.bazel	2022-02-04 00:54:43.031966734 -0800
+++ third_party/cargo/remote/BUILD.libssh2-sys-0.2.21.bazel	2022-02-04 00:54:44.272023742 -0800
@@ -48,6 +48,7 @@ cargo_build_script(
     data = glob(["**"]) + [
         "@cargo_raze__libssh2//:libssh2",
         "@cargo_raze__openssl//:openssl",
+        "@cargo_raze__zlib//:copy_public_headers",
     ],
     edition = "2015",
     links = "ssh2",

--- impl/src/util.rs	2022-02-06 17:53:29.535707368 -0800
+++ impl/src/util.rs	2022-02-06 17:55:22.513000536 -0800
@@ -40,6 +40,8 @@ static SUPPORTED_PLATFORM_TRIPLES: &[&st
   "aarch64-linux-android",
   "aarch64-unknown-linux-gnu",
   "arm-unknown-linux-gnueabi",
+  "armv7-unknown-linux-gnueabi",
+  "armv7-unknown-linux-gnueabihf",
   "i686-linux-android",
   "i686-unknown-freebsd",
   "powerpc-unknown-linux-gnu",

--- impl/BUILD.bazel	2022-05-30 01:37:24.111005507 -0700
+++ impl/BUILD.bazel	2022-05-30 01:37:22.778944267 -0700
@@ -26,6 +26,9 @@ rust_binary(
     edition = "2018",
     proc_macro_deps = all_crate_deps(proc_macro = True),
     deps = [":cargo_raze"] + all_crate_deps(),
+    # TODO: Make Rust play happy with pic vs nopic. Details at:
+    # https://github.com/bazelbuild/rules_rust/issues/118
+    rustc_flags = ["-Crelocation-model=static"],
 )
 
 _TEST_DATA = glob(["src/**/*.template"]) + [
