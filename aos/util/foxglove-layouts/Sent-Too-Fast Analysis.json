{
  "configById": {
    "NodePlayground!3jd6ze5": {
      "selectedNodeId": "a2a921fe-ea55-45ed-881f-d66ad46bc666",
      "autoFormatOnSave": true
    },
    "RawMessages!qt4g88": {
      "topicPath": "configuration",
      "diffTopicPath": "",
      "diffMethod": "custom",
      "diffEnabled": false,
      "showFullMessageForDiff": false,
      "autoExpandMode": "auto"
    },
    "RawMessages!29a8tmz": {
      "topicPath": "\"/aos aos.timing.Report\"{name==\"aos_send\"}",
      "diffTopicPath": "",
      "diffMethod": "custom",
      "diffEnabled": false,
      "showFullMessageForDiff": false,
      "autoExpandMode": "auto"
    },
    "RawMessages!26t8w4x": {
      "topicPath": "/send_errors.channels[:]{type==\"aos.logging.LogMessageFbs\"}{name==\"/aos\"}",
      "diffTopicPath": "",
      "diffMethod": "custom",
      "diffEnabled": false,
      "showFullMessageForDiff": false,
      "autoExpandMode": "auto"
    },
    "SourceInfo!4j44duu": {},
    "Plot!26dzl0q": {
      "title": "Plot",
      "paths": [
        {
          "value": "\"/aos aos.timing.Report\".senders[:].error_counts[0].count",
          "enabled": true,
          "timestampMethod": "receiveTime"
        }
      ],
      "showXAxisLabels": true,
      "showYAxisLabels": true,
      "showLegend": true,
      "legendDisplay": "floating",
      "showPlotValuesInLegend": false,
      "isSynced": true,
      "xAxisVal": "timestamp",
      "sidebarDimension": 240
    }
  },
  "globalVariables": {},
  "userNodes": {
    "a2a921fe-ea55-45ed-881f-d66ad46bc666": {
      "sourceCode": "// The ./types module provides helper types for your Input events and messages.\nimport { Input, Message } from \"./types\";\n\n// Your node can output well-known message types, any of your custom message types, or\n// complete custom message types.\n//\n// Use `Message` to access your data source types or well-known types:\n// type Twist = Message<\"geometry_msgs/Twist\">;\n//\n// Conventionally, it's common to make a _type alias_ for your node's output type\n// and use that type name as the return type for your node function.\n// Here we've called the type `Output` but you can pick any type name.\ntype ChannelSendErrors = {\n  name: string;\n  type: string;\n  sent_too_fast_errors: number;\n  all_send_errors: number;\n};\ntype AggregateSendErrors = {\n  channels: ChannelSendErrors[];\n};\n\n// These are the topics your node \"subscribes\" to. Studio will invoke your node function\n// when any message is received on one of these topics.\nexport const inputs = [\"configuration\", \"/aos aos.timing.Report\"];\n\n// Any output your node produces is \"published\" to this topic. Published messages are only visible within Studio, not to your original data source.\nexport const output = \"/send_errors\";\n\nlet config: any = undefined;\n\nconst errors: AggregateSendErrors = { channels: [] };\n\n// This function is called with messages from your input topics.\n// The first argument is an event with the topic, receive time, and message.\n// Use the `Input<...>` helper to get the correct event type for your input topic messages.\nexport default function node(\n  event: Input<\"configuration\"> | Input<\"/aos aos.timing.Report\">\n): AggregateSendErrors | undefined {\n  if (event.topic == \"configuration\") {\n    config = event.message;\n    for (const channel of event.message.channels) {\n      errors.channels.push({\n        name: channel.name,\n        type: channel.type,\n        sent_too_fast_errors: 0,\n        all_send_errors: 0,\n      });\n    }\n  } else {\n    if (config == undefined) {\n      return;\n    }\n    for (const channel_errors of errors.channels) {\n      for (const sender of event.message.senders) {\n        const channel = config.channels[sender.channel_index];\n        if (\n          channel.name == channel_errors.name &&\n          channel.type == channel_errors.type\n        ) {\n          for (const error_count of sender.error_counts) {\n            if (error_count.error == 0) {\n              channel_errors.sent_too_fast_errors += error_count.count;\n            }\n            channel_errors.all_send_errors += error_count.count;\n          }\n          return errors;\n        }\n      }\n    }\n  }\n  return;\n}\n",
      "name": "a2a921fe"
    }
  },
  "linkedGlobalVariables": [],
  "playbackConfig": {
    "speed": 5,
    "messageOrder": "receiveTime"
  },
  "layout": {
    "first": {
      "first": "NodePlayground!3jd6ze5",
      "second": "Plot!26dzl0q",
      "direction": "row"
    },
    "second": {
      "first": "RawMessages!qt4g88",
      "second": {
        "first": {
          "first": "RawMessages!29a8tmz",
          "second": "RawMessages!26t8w4x",
          "direction": "column",
          "splitPercentage": 46.354586297778205
        },
        "second": "SourceInfo!4j44duu",
        "direction": "column",
        "splitPercentage": 67.88193961641498
      },
      "direction": "column",
      "splitPercentage": 36.885245901639344
    },
    "direction": "row",
    "splitPercentage": 70
  }
}
